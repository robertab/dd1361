
==================== FINAL INTERFACE ====================
2016-04-06 07:48:14.353691 UTC

interface main@main:Main 7103
  interface hash: e7a3224d0dd9cd85c365d92513208653
  ABI hash: 01b17169af07318a2e8199f2c992d2c7
  export-list hash: ff68f77591905ad04eeadef0e24bd70c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ed951f2071109777ea58ce0368297b8d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.mainLoop
  Main.runConn
  Main.startingBalance
  Main.user1
  Main.validateUser
  Main.CardNumber
  Main.PinCode
  Main.User{Main.User Main.balance Main.getCardNumber Main.getPinCode}
module dependencies:
package dependencies: base-4.8.2.0 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket
         network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Control.Concurrent 1268fba2c60b0505ec9e8731d08a8e75
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO.Handle 631f32e0ad65df940f6a2b3e721d8452
import  -/  base-4.8.2.0:GHC.IO.Handle.Types fe7c781ed6b3f00c4b1f0266e32a6e61
import  -/  base-4.8.2.0:GHC.IO.IOMode 89fcaeb96929360e7be5a7bbb14ceec9
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket fe202b7c4ba03d40825f77ae44a4b4a8
import  -/  network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ:Network.Socket.Types 89d2f8d77dbb96f0c0f2ddaca18913ae
15a02f376fb7c059e9ecb65c33bca88c
  $fEqUser :: GHC.Classes.Eq Main.User
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User Main.$fEqUser_$c== Main.$fEqUser_$c/= -}
15a02f376fb7c059e9ecb65c33bca88c
  $fEqUser_$c/= :: Main.User -> Main.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Main.User b :: Main.User ->
                 case Main.$fEqUser_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
15a02f376fb7c059e9ecb65c33bca88c
  $fEqUser_$c== :: Main.User -> Main.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Main.User w1 :: Main.User ->
                 case w of ww { Main.User ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.User ww5 ww6 ww7 ->
                 Main.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
15a02f376fb7c059e9ecb65c33bca88c
  $fShowUser :: GHC.Show.Show Main.User
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.User
                  Main.$fShowUser_$cshowsPrec
                  Main.$fShowUser_$cshow
                  Main.$fShowUser_$cshowList -}
15a02f376fb7c059e9ecb65c33bca88c
  $fShowUser1 :: Main.User -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Main.User w1 :: GHC.Base.String ->
                 case w of ww { Main.User ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec 0 ww1 ww2 ww3 w1 }) -}
fcde7bf464b69cf47d0dd36a83ffbea7
  $fShowUser2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
2d9c9a4e44365a61106d8f18977e8739
  $fShowUser3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "balance = "#) -}
30bbe84b12be57dd826cb7b0836b12fe
  $fShowUser4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getPinCode = "#) -}
030aa7f16216d6623a1074ff08e83cbd
  $fShowUser5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
ae00939b58c153f3628f7e287c3e6177
  $fShowUser6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getCardNumber = "#) -}
cd1e99cb7c58e385f3de0e031c93ff10
  $fShowUser7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "User {"#) -}
15a02f376fb7c059e9ecb65c33bca88c
  $fShowUser_$cshow :: Main.User -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Main.User ->
                 Main.$fShowUser_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
15a02f376fb7c059e9ecb65c33bca88c
  $fShowUser_$cshowList :: [Main.User] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.User Main.$fShowUser1) -}
15a02f376fb7c059e9ecb65c33bca88c
  $fShowUser_$cshowsPrec ::
    GHC.Types.Int -> Main.User -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Main.User w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.User ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
b0da88858ebe5b2616c220e8bbb246a5
  $w$c== ::
    Main.CardNumber
    -> Main.PinCode
    -> GHC.Integer.Type.Integer
    -> Main.CardNumber
    -> Main.PinCode
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: Main.CardNumber
                   ww1 :: Main.PinCode
                   ww2 :: GHC.Integer.Type.Integer
                   ww3 :: Main.CardNumber
                   ww4 :: Main.PinCode
                   ww5 :: GHC.Integer.Type.Integer ->
                 case GHC.Integer.Type.eqInteger# ww ww3 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger# ww1 ww4 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Integer.Type.eqInteger ww2 ww5 } } } }) -}
78a74b89db5dabb8702ee88715661903
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.CardNumber
    -> Main.PinCode
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Main.CardNumber
                   ww2 :: Main.PinCode
                   ww3 :: GHC.Integer.Type.Integer
                   w :: GHC.Base.String ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowUser7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowUser6
                          (case GHC.Show.$w$cshowsPrec1
                                  0
                                  ww1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Main.$fShowUser5
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Main.$fShowUser4
                                        (case GHC.Show.$w$cshowsPrec1
                                                0
                                                ww2
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Main.$fShowUser5
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      Main.$fShowUser3
                                                      (case GHC.Show.$w$cshowsPrec1
                                                              0
                                                              ww3
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 Main.$fShowUser2
                                                                 x) of ww4 { (#,#) ww5 ww6 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww5
                                                         ww6 }))) of ww4 { (#,#) ww5 ww6 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww5
                                           ww6 }))) of ww4 { (#,#) ww5 ww6 ->
                           GHC.Types.: @ GHC.Types.Char ww5 ww6 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w)) }) -}
a7bd7d002031499baaf1e39aadf6dd14
  $wa ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><L,U><L,U><L,U(U)><L,U><L,U>,
     Inline: [0] -}
e52f74beadfde458ae0bd0a74f927c4a
  $wvalidateUser :: Main.CardNumber -> Main.PinCode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: Main.CardNumber ww1 :: Main.PinCode ->
                 case GHC.Integer.Type.eqInteger# ww Main.user3 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger#
                             ww1
                             Main.user2 of wild2 { DEFAULT ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 } } }) -}
e2a6f2793777c26bd539727c29a8a654
  type CardNumber = GHC.Integer.Type.Integer
23744e3b5b21f12b3dd4f28bcdf33212
  type PinCode = GHC.Integer.Type.Integer
15a02f376fb7c059e9ecb65c33bca88c
  data User
    = User {getCardNumber :: Main.CardNumber,
            getPinCode :: Main.PinCode,
            balance :: GHC.Integer.Type.Integer}
803f62e143e5349723656d62e001d985
  balance :: Main.User -> GHC.Integer.Type.Integer
  RecSel Main.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User ->
                 case ds of wild { Main.User ds1 ds2 ds3 -> ds3 }) -}
1c3c12f80af950605ecdd0c085d06baa
  getCardNumber :: Main.User -> Main.CardNumber
  RecSel Main.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User ->
                 case ds of wild { Main.User ds1 ds2 ds3 -> ds1 }) -}
9c8566454df9a1becf6cbd6136eb4be6
  getPinCode :: Main.User -> Main.PinCode
  RecSel Main.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.User ->
                 case ds of wild { Main.User ds1 ds2 ds3 -> ds2 }) -}
13facc4a6681ddfe1edfa2ac9a441fb6
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7a19838c6111676ef9f4b7f92151ca9e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Network.Socket.$wa20
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4
                        4
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   a18 :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        a18
                        0
                        1
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.NTCo:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.NTCo:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.NTCo:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ setsockopt GHC.Prim.Int#
                                                                                           -> GHC.Prim.Int#
                                                                                           -> GHC.Prim.Int#
                                                                                           -> GHC.Prim.Addr#
                                                                                           -> GHC.Prim.Int#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        a18
                        4
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                     case Network.Socket.$wa3
                            ds `cast` (Sym (Foreign.C.Types.NTCo:CInt[0]))
                            ww5
                            Main.main4
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case Network.Socket.$wa10
                            ds `cast` (Sym (Foreign.C.Types.NTCo:CInt[0]))
                            ww5
                            Main.main3
                            ipv8 of ds13 { (#,#) ipv10 ipv11 ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.main2
                            GHC.Types.True
                            ipv10 of ds14 { (#,#) ipv12 ipv13 ->
                     case ww5 of ww7 { GHC.MVar.MVar ww8 ->
                     Main.$wa
                       ds `cast` (Sym (Foreign.C.Types.NTCo:CInt[0]))
                       ww2
                       ww3
                       ww4
                       ww8
                       ipv12 } } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   (-1)
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
c7145d78022ec02e5d531197869eca3f
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Starting bank..."#) -}
aceaaca4f3d13db6fe3541928e0f2218
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2) -}
dcb4404e9b54f59ede41f843b65c588f
  main4 :: Network.Socket.Types.SockAddr
  {- Unfolding: (Network.Socket.Types.SockAddrInet
                   Main.main5
                   Network.Socket.iNADDR_ANY) -}
ab602d69eb0902cfee0bfaae6199fe8c
  main5 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.2.1@netwo_A6pE0dLgMEk2GtUa1JtTJQ htons GHC.Prim.Word#
                                                                                      -> GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                      -> (# GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld,
                                                                                            GHC.Prim.Word# #)}
                        __word 8028
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                   `cast`
                 (Sym (Network.Socket.Types.NTCo:PortNumber[0])) }) -}
eb4755c6e0079deacf08119400ab9e92
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ffeb8bd7a1a30881d0f9044af4ea4df4
  mainLoop :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLLLS),1*U(U(U),U,U,U(U),U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mainLoop1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
cd4c893209af9d475bd476f4e518a991
  mainLoop1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLLLS),1*U(U(U),U,U,U(U),U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Network.Socket.Types.Socket
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wa ww1 ww2 ww3 ww4 ww7 w1 } }) -}
8019d834164d90cdf1f30b23441b2e5e
  runConn ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U(U(U),A,A,A,1*U(U)),A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runConn1
                  `cast`
                (<(Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0fe98f5a6a51c2c0404f6ccf77730bec
  runConn1 ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U(U(U),A,A,A,1*U(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: (Network.Socket.Types.Socket,
                          Network.Socket.Types.SockAddr)
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild { (,) sock ds1 ->
                 case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.$wa22
                        ww1
                        ww5
                        GHC.IO.IOMode.ReadWriteMode
                        eta of ds2 { (#,#) ipv ipv1 ->
                 Main.runConn2 ipv1 ipv } } }) -}
ec1e6d1d3d0e052dcd2e2d3949bb35ed
  runConn2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ hdl :: GHC.IO.Handle.Types.Handle
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.hSetBuffering1
                        hdl
                        GHC.IO.Handle.Types.NoBuffering
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.runConn3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.hClose1 hdl ipv2 } }) -}
fa6be51739e3ca0a3bd814344b15272f
  runConn3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Client connected... "#) -}
11cd50c4e8d6ab2aa18d8f298e49c230
  startingBalance :: GHC.Integer.Type.Integer
  {- Unfolding: (Main.startingBalance1) -}
8032da0fd4f25e8aa8a15cd9298c3fb2
  startingBalance1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2000) -}
36b5dfeec47df486046b64a08c043ab1
  user1 :: Main.User
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.User
                   Main.user3
                   Main.user2
                   Main.startingBalance1) -}
0ab6950bce8fc713347bd583451056c5
  user2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
5410d8f7acdce2e4b9c664134432602a
  user3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 444) -}
e2d6224d92dd3fb531f03ee6348ab0d1
  validateUser :: Main.User -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.User ->
                 case w of ww { Main.User ww1 ww2 ww3 ->
                 Main.$wvalidateUser ww1 ww2 }) -}
instance GHC.Classes.Eq [Main.User] = Main.$fEqUser
instance GHC.Show.Show [Main.User] = Main.$fShowUser
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

